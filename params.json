{"name":"ICAS Ontology","tagline":"Semantic Description of Information Security Related Information","body":"\r\nThis is the unified ICAS ontology designed to describe the\r\nabstraction of information-security related information as used\r\nby performers on the DARPA ICAS project.\r\n\r\n## A Brief Explanation of OWL and RDF\r\n\r\nThe unified ICAS ontology is a collection of\r\n[OWL2](http://www.w3.org/TR/owl2-overview/) ontologies under the\r\n`http://www.invincea.com/ontologies/icas/1.0/` namespace. Each\r\nontology covers a specific conceptual area; for instance all\r\ninformation related to users and user accounts is captured in the\r\nUser ontology.\r\n\r\nOWL2 is an ontology description language built on top of the\r\n[Resource Description Framework (RDF)](http://www.w3.org/TR/rdf-primer/).\r\nRDF describes a way of storing data that is different from the\r\ntraditional table-based conception. RDF data consists of triples,\r\nand only triples; each triple, called a *statement* consists of a\r\n*subject*, *predicate*, and an *object*.\r\n\r\nThe *subject* represents a resource of some kind, the *predicate*\r\na relation, and the *object* can either be a literal value or\r\nanother resource.\r\n\r\nOWL2 and the [RDF Schema (RDFS)](http://www.w3.org/TR/rdf-schema/)\r\ndefine a set of resources and properties that can be used to\r\ndevelop ontologies for RDF datasets.\r\n\r\n### Examples\r\n\r\nThis section contains some annotated excerpts from the ontologies\r\nas examples of how to read RDF and OWL. These examples are\r\nencoded in the [Terse RDF Triple Langauge (Turtle)] (http://www.w3.org/TeamSubmission/turtle/),\r\njust like the ICAS ontology. This is intended only as an\r\noverview and omits many details\r\n\r\n##### Turtle Primer\r\n\r\nRecall that RDF consists only of *statements*, each of which is\r\ncomposed of a *subject*, a *predicate*, and an *object*. In\r\nthe Turtle encoding, there is a shorthand creating multiple\r\nstatements that uses the `;` to indicate continuation with the\r\nsame *subject*. The following example shows how to interpret this\r\nsyntax.\r\n\r\n``` turtle\r\n<subject> <predicate> <object> ;\r\n            <predicate> <object> .\r\n\r\n<subject-2> <predicate-2> <object-2> .\r\n```\r\n\r\n##### UserAccount Class\r\n\r\nThis example depicts the UserAccount class from the User\r\nontology. It contains five statements in the Turtle syntax,\r\nall of which share  `:UserAccount` as the subject.\r\n\r\n``` turtle\r\n:UserAccount a owl:Class ;\r\n    rdfs:comment \"an individual set of credentials.\"@en ;\r\n    rdfs:label \"User\"@en ;\r\n    rdfs:subClassOf owl:Thing .\r\n```\r\n\r\nThe first statement `:UserAccount a owl:Class` states that\r\n`:UserAccount` has the type `owl:Class`. `owl:Class` is used to\r\ndefine types of resources.\r\n\r\nThe next two statements provide labels and comments - essentially\r\nannotations - a about `:UserAccount`. The third statement is\r\nstandard and simply indicates that a `:UserAccount` is something\r\nthat exists in the world\r\n\r\n##### Datatype Property\r\n\r\nDatatype Properties describe the types of literal information\r\nthat can be represented and connected to resources. The following\r\nexcerpt describes the `:hasFullName` property, which represents\r\nthe concept of a user's display name.\r\n\r\n``` turtle\r\n:hasFullName\r\n    a owl:DatatypeProperty ;\r\n    rdfs:comment \"and extended name or description, used only for display purposes\"@en ;\r\n    rdfs:label \"has full name\"@en ;\r\n    rdfs:domain :UserAccount ;\r\n    rdfs:range xsd:string .\r\n```\r\n\r\nThe first statement is similar to what we saw before, but this\r\ntime it indicates that `:hasFullName` is a DatatypeProperty.  The\r\ncomment and label fulfill the same role as in the prior example.\r\n\r\nThe last two statements `:hasFullName rdfs:domain :UserAccount`\r\nand `:hasFullName rdfs:range xsd:string` represent constraints on\r\nthis property. The former states that only `:UserAccounts` may be\r\nthe *subject* of this property. The latter says that the literal\r\nobject value of this property must be of type string.\r\n\r\n\r\n##### Object Property\r\n\r\nObject Properties describe relationships between resources.\r\nThe example below captures the notion of group membership for users\r\nin computing systems. Note the use of `rdfs:domain` and\r\n`rdfs:range` to constrain the valid *subject* and *objects* for\r\nthis *predicate*.\r\n\r\n``` turtle\r\n:memberOfGroup\r\n    a owl:ObjectProperty ;\r\n    rdfs:domain :UserAccount ;\r\n    rdfs:label \"is member of Group\"@en ;\r\n    rdfs:range :Group ;\r\n```\r\n\r\n## File Structure\r\n\r\nEach of these sub-ontologies is written to a separate file that\r\nshares the same name as the ontology using the\r\n[Terse RDF Triple Langauge (Turtle)] (http://www.w3.org/TeamSubmission/turtle/)\r\nencoding.  Thus, the User ontology can\r\nbe found in user.ttl and the Authentication ontology can be found\r\nin authentication.ttl.\r\n\r\nAlthough each file focuses on a specific set of concepts, they\r\nare not isolated. At the top of each file, a series of namespaces\r\ndescribe other ontologies from which that sub-ontology uses concepts.\r\n\r\n\r\n## Tools for Reading OWL2 Ontology Files\r\n\r\nWhile OWL2 ontology files are human readable, the Semantic Web\r\ncommunity has also developed a wide variety of GUI based tools\r\nthat can be used to read and edit ontology files. Links to a\r\nselection of these tools can be found on the [Semantic Web\r\nWiki](http://semanticweb.org/wiki/Category:Ontology_editor)\r\n\r\n## Distribution\r\n\r\nDistribution Statement “A” (Approved for Public Release, Distribution Unlimited)\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}